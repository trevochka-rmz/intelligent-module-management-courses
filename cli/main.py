import requests
import click
from typing import List
from enum import Enum

BASE_URL = "http://localhost:8000"

class DifficultyLevel(Enum):
    BEGINNER = "–Ω–∞—á–∞–ª—å–Ω—ã–π"
    INTERMEDIATE = "—Å—Ä–µ–¥–Ω–∏–π"
    ADVANCED = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–º–∫–æ–π"""
    click.echo("‚ïî" + "‚ïê" * (len(title) + 2) + "‚ïó")
    click.echo(f"‚ïë {title} ‚ïë")
    click.echo("‚ïö" + "‚ïê" * (len(title) + 2) + "‚ïù")

def show_error(message):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    click.echo(f"\n‚ùå –û—à–∏–±–∫–∞: {message}")
    click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def show_success(message):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    click.echo(f"\n‚úÖ {message}")
    click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def list_courses_short():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    try:
        response = requests.get(f"{BASE_URL}/courses")
        if response.status_code == 200:
            for course in response.json():
                click.echo(f"{course['id']}: {course['title']} ({course['total_hours']} —á–∞—Å–æ–≤)")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def list_programs_short():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º"""
    try:
        response = requests.get(f"{BASE_URL}/programs")
        if response.status_code == 200:
            for program in response.json():
                click.echo(f"{program['id']}: {program['name']}")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def view_course_details():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞"""
    click.clear()
    print_header("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞")
    
    list_courses_short()
    course_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/courses/{course_id}")
        if response.status_code == 200:
            course = response.json()
            
            click.echo("\nüìö " + click.style(course['title'], fg='green', bold=True))
            click.echo(f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {course['description']}")
            click.echo(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {course['total_hours']}")
            click.echo(f"–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —á–∞—Å—ã: {course['lecture_hours']}")
            click.echo(f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã: {course['practice_hours']}")
            click.echo(f"–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {course['difficulty']}")
            click.echo(f"–î–æ—Å—Ç—É–ø–µ–Ω –æ–Ω–ª–∞–π–Ω: {'–î–∞' if course['has_online'] else '–ù–µ—Ç'}")
            
            programs_response = requests.get(f"{BASE_URL}/courses/{course_id}/programs")
            if programs_response.status_code == 200 and programs_response.json():
                click.echo("\n–í—Ö–æ–¥–∏—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
                for program in programs_response.json():
                    click.echo(f"  - {program['name']} (ID: {program['id']})")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def view_program_details():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    click.clear()
    print_header("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    list_programs_short()
    program_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º—ã", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/programs/{program_id}")
        if response.status_code == 200:
            program = response.json()
            
            click.echo("\nüéì " + click.style(program['name'], fg='blue', bold=True))
            click.echo(f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {program['description']}")
            click.echo(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program['total_duration_weeks']} –Ω–µ–¥–µ–ª—å")
            
            if program['courses']:
                click.echo("\n–ö—É—Ä—Å—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
                for course in program['courses']:
                    click.echo(f"  - {course['title']} (ID: {course['id']}, {course['total_hours']} —á–∞—Å–æ–≤)")
            else:
                click.echo("\n–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

# –ú–µ—Ç–æ–¥—ã –¥–ª—è Course
def add_course():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    click.clear()
    print_header("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞")
    
    try:
        title = click.prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
        description = click.prompt("–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞", default="")
        total_hours = click.prompt("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤", type=int)
        lecture_hours = click.prompt("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤", type=int, default=0)
        practice_hours = click.prompt("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–æ–≤", type=int, default=0)
        
        click.echo("\n–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for i, level in enumerate(DifficultyLevel, 1):
            click.echo(f"{i}. {level.value}")
        difficulty_choice = click.prompt("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å", type=int, default=2)
        difficulty = list(DifficultyLevel)[difficulty_choice-1].value
        
        has_online = click.confirm("–î–æ—Å—Ç—É–ø–µ–Ω –æ–Ω–ª–∞–π–Ω?")
        
        course_data = {
            "title": title,
            "description": description,
            "total_hours": total_hours,
            "lecture_hours": lecture_hours,
            "practice_hours": practice_hours,
            "difficulty": difficulty,
            "has_online": has_online
        }
        
        response = requests.post(f"{BASE_URL}/courses/", json=course_data)
        
        if response.status_code == 201:
            show_success("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        show_error(str(e))

def update_course():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞"""
    click.clear()
    print_header("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞")
    
    list_courses_short()
    course_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/courses/{course_id}")
        if response.status_code != 200:
            show_error(response.text)
            return
        
        current_course = response.json()
        
        title = click.prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", default=current_course['title'])
        description = click.prompt("–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞", default=current_course['description'])
        total_hours = click.prompt("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤", type=int, default=current_course['total_hours'])
        lecture_hours = click.prompt("–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —á–∞—Å—ã", type=int, default=current_course['lecture_hours'])
        practice_hours = click.prompt("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã", type=int, default=current_course['practice_hours'])
        
        click.echo("\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: " + current_course['difficulty'])
        click.echo("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:")
        for i, level in enumerate(DifficultyLevel, 1):
            click.echo(f"{i}. {level.value}")
        difficulty_choice = click.prompt("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å", type=int, 
                                       default=list(DifficultyLevel).index(
                                           DifficultyLevel(current_course['difficulty'])) + 1)
        difficulty = list(DifficultyLevel)[difficulty_choice-1].value
        
        has_online = click.confirm("–î–æ—Å—Ç—É–ø–µ–Ω –æ–Ω–ª–∞–π–Ω?", default=current_course['has_online'])
        
        course_data = {
            "title": title,
            "description": description,
            "total_hours": total_hours,
            "lecture_hours": lecture_hours,
            "practice_hours": practice_hours,
            "difficulty": difficulty,
            "has_online": has_online
        }
        
        update_response = requests.put(f"{BASE_URL}/courses/{course_id}", json=course_data)
        
        if update_response.status_code == 200:
            show_success("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            show_error(update_response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        show_error(str(e))

def delete_course():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    click.clear()
    print_header("–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞")
    
    list_courses_short()
    course_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", type=int)
    
    try:
        programs_response = requests.get(f"{BASE_URL}/courses/{course_id}/programs")
        if programs_response.status_code == 200 and programs_response.json():
            click.echo("\n–≠—Ç–æ—Ç –∫—É—Ä—Å –≤—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
            for program in programs_response.json():
                click.echo(f"  - {program['name']} (ID: {program['id']})")
            
            if not click.confirm("\n–ö—É—Ä—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                return
        
        if click.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å?"):
            response = requests.delete(f"{BASE_URL}/courses/{course_id}")
            
            if response.status_code == 204:
                show_success("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

# –ú–µ—Ç–æ–¥—ã –¥–ª—è Program
def add_program():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    click.clear()
    print_header("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    try:
        name = click.prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        description = click.prompt("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", default="")
        duration = click.prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–µ–¥–µ–ª—å)", type=int, default=12)
        
        list_courses_short()
        course_ids = click.prompt(
            "\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –±–µ–∑ –∫—É—Ä—Å–æ–≤)", 
            default=""
        )
        
        program_data = {
            "name": name,
            "description": description,
            "total_duration_weeks": duration,
            "course_ids": [int(cid.strip()) for cid in course_ids.split(",") if cid.strip()]
        }
        
        response = requests.post(f"{BASE_URL}/programs/", json=program_data)
        
        if response.status_code == 201:
            show_success("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        show_error(str(e))

def update_program():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    click.clear()
    print_header("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    list_programs_short()
    program_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/programs/{program_id}")
        if response.status_code != 200:
            show_error(response.text)
            return
        
        current_program = response.json()
        
        name = click.prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", default=current_program['name'])
        description = click.prompt("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", default=current_program['description'])
        duration = click.prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–µ–¥–µ–ª—å)", type=int, default=current_program['total_duration_weeks'])
        
        click.echo("\n–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
        if current_program['courses']:
            for course in current_program['courses']:
                click.echo(f"  - {course['title']} (ID: {course['id']})")
        else:
            click.echo("  –í –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤")
        
        available_response = requests.get(f"{BASE_URL}/programs/{program_id}/available-courses")
        if available_response.status_code == 200 and available_response.json():
            click.echo("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            for course in available_response.json():
                click.echo(f"  - {course['title']} (ID: {course['id']})")
        
        course_ids = click.prompt(
            "\n–í–≤–µ–¥–∏—Ç–µ ID –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å)", 
            default=""
        )
        
        program_data = {
            "name": name,
            "description": description,
            "total_duration_weeks": duration,
            "course_ids": [int(cid.strip()) for cid in course_ids.split(",") if cid.strip()]
        }
        
        update_response = requests.put(f"{BASE_URL}/programs/{program_id}", json=program_data)
        
        if update_response.status_code == 200:
            show_success("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            show_error(update_response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        show_error(str(e))

def delete_program():
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    click.clear()
    print_header("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    list_programs_short()
    program_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", type=int)
    
    try:
        if click.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É?"):
            response = requests.delete(f"{BASE_URL}/programs/{program_id}")
            
            if response.status_code == 204:
                show_success("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def add_course_to_program():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    click.clear()
    print_header("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É")
    
    list_programs_short()
    program_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º—ã", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/programs/{program_id}/available-courses")
        if response.status_code == 200:
            if not response.json():
                show_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return
            
            click.echo("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:")
            for course in response.json():
                click.echo(f"{course['id']}: {course['title']}")
            
            course_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", type=int)
            
            add_response = requests.post(
                f"{BASE_URL}/programs/{program_id}/courses/{course_id}"
            )
            
            if add_response.status_code == 200:
                show_success("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É!")
            else:
                show_error(add_response.text)
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def remove_course_from_program():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    click.clear()
    print_header("–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    list_programs_short()
    program_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º—ã", type=int)
    
    try:
        response = requests.get(f"{BASE_URL}/programs/{program_id}")
        if response.status_code == 200:
            program = response.json()
            
            if not program['courses']:
                show_error("–í —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤")
                return
            
            click.echo("\n–ö—É—Ä—Å—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
            for course in program['courses']:
                click.echo(f"{course['id']}: {course['title']}")
            
            course_id = click.prompt("\n–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", type=int)
            
            remove_response = requests.delete(
                f"{BASE_URL}/programs/{program_id}/courses/{course_id}"
            )
            
            if remove_response.status_code == 200:
                show_success("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
            else:
                show_error(remove_response.text)
        else:
            show_error(response.text)
    except requests.exceptions.RequestException:
        show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def courses_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏"""
    while True:
        click.clear()
        print_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
        click.echo("1. –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
        click.echo("2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤")
        click.echo("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å")
        click.echo("4. –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å")
        click.echo("5. –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
        click.echo("0. –ù–∞–∑–∞–¥")
        
        choice = click.prompt("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", type=int)
        
        if choice == 1:
            add_course()
        elif choice == 2:
            click.clear()
            print_header("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤")
            list_courses_short()
            click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        elif choice == 3:
            view_course_details()
        elif choice == 4:
            update_course()
        elif choice == 5:
            delete_course()
        elif choice == 0:
            break
        else:
            show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def programs_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
    while True:
        click.clear()
        print_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
        click.echo("1. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        click.echo("2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        click.echo("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        click.echo("4. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        click.echo("5. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        click.echo("6. –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É")
        click.echo("7. –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        click.echo("0. –ù–∞–∑–∞–¥")
        
        choice = click.prompt("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", type=int)
        
        if choice == 1:
            add_program()
        elif choice == 2:
            click.clear()
            print_header("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
            list_programs_short()
            click.pause("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        elif choice == 3:
            view_program_details()
        elif choice == 4:
            update_program()
        elif choice == 5:
            delete_program()
        elif choice == 6:
            add_course_to_program()
        elif choice == 7:
            remove_course_from_program()
        elif choice == 0:
            break
        else:
            show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        click.clear()
        print_header("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        click.echo("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
        click.echo("2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
        click.echo("0. –í—ã—Ö–æ–¥")
        
        choice = click.prompt("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", type=int)
        
        if choice == 1:
            courses_menu()
        elif choice == 2:
            programs_menu()
        elif choice == 0:
            click.clear()
            click.echo("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            main_menu()
        else:
            click.echo("–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å–Ω–∞—á–∞–ª–∞.")
            click.pause("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")
    except requests.exceptions.RequestException:
        click.echo("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        click.pause("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")